{"version":3,"sources":["components/card/Card.module.scss","App.module.css","components/card/Card.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","taste","bonus","size","description","useState","hover","setHover","approve","setApprove","disableds","setDisabled","disabledFooterText","style","color","defaultFooter","className","s","link","selectedFooter","dsc","defaultApprove","catApprove","margin","btnDisabled","onClick","cards","onMouseEnter","onMouseLeave","card","cardSelected","cardDisabled","product__description","descriptionDisabled","name","title","portion","portionSelected","portionDisabled","photo_block","footer","App","test","container","container__block","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.de19fc52.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"btnDisabled\":\"Card_btnDisabled__20v8A\",\"cards\":\"Card_cards__1IXgE\",\"card\":\"Card_card__92qNt\",\"cardDisabled\":\"Card_cardDisabled__222_c\",\"portion\":\"Card_portion__20QLv\",\"cardSelected\":\"Card_cardSelected__iBYZa\",\"portionSelected\":\"Card_portionSelected__2QaFJ\",\"product__description\":\"Card_product__description__33scB\",\"descriptionDisabled\":\"Card_descriptionDisabled__OSKXW\",\"title\":\"Card_title__U9ih5\",\"name\":\"Card_name__20NdQ\",\"taste\":\"Card_taste__3Vj5B\",\"bonus\":\"Card_bonus__1u5NH\",\"photo_block\":\"Card_photo_block__2WJd8\",\"photoGradient\":\"Card_photoGradient__2frks\",\"photo\":\"Card_photo__2NJ-2\",\"portionDisabled\":\"Card_portionDisabled__19E8N\",\"footer\":\"Card_footer__3XCpo\",\"link\":\"Card_link__3S8IZ\",\"dsc\":\"Card_dsc__2Z6UG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container__block\":\"App_container__block__YC0p7\"};","import React, { useState } from 'react';\r\nimport s from './Card.module.scss';\r\n\r\nconst Card = ({ taste, bonus, size, description }) => {\r\n  const [hover, setHover] = useState(false)\r\n  const [approve, setApprove] = useState(false)\r\n  const [disableds, setDisabled] = useState(false)\r\n\r\n\r\n  const disabledFooterText = <span style={{color:'#FFFF66'}}>Печалька, {taste} закончился</span>\r\n  const defaultFooter = <span> Чего сидишь? Порадуй котэ, <em className={s.link}>купи.</em></span>\r\n  const selectedFooter = <span className={s.dsc}>{description}</span>\r\n  const defaultApprove = <>Сказачное заморское явство</>\r\n  const catApprove = <>Котэ не одобряет?</>\r\n  return (\r\n    <div style={{margin:'10px'}}>\r\n      <button className={s.btnDisabled} onClick={!hover ? ()=>setDisabled(!disableds) : null}>d</button>\r\n      \r\n      <div className={s.cards}\r\n        onClick={!disableds ? () => setHover(!hover) : null}\r\n        onMouseEnter={hover ? () => setApprove(true) : null}\r\n        onMouseLeave={() => setApprove(false)}>\r\n        \r\n        <div \r\n          className={hover \r\n            ? s.card + ' ' + s.cardSelected \r\n            : !disableds \r\n            ? s.card \r\n            : s.card + ' ' + s.cardDisabled } >\r\n\r\n          <section \r\n            className={\r\n              !disableds \r\n              ? s.product__description \r\n              : s.product__description + ' ' + s.descriptionDisabled}>\r\n            <span \r\n              className={s.name}>{\r\n                !approve \r\n                ? defaultApprove \r\n                : catApprove}\r\n            </span>\r\n            <h2 className={s.title}>Нямушка</h2>\r\n            <span className={s.taste}>{taste}</span>\r\n            <p className={s.bonus}>{bonus}</p>\r\n          </section>\r\n\r\n          <div \r\n            className={\r\n              hover \r\n              ? s.portion + ' ' + s.portionSelected \r\n              : disableds \r\n              ? s.portion + ' ' + s.portionDisabled \r\n              : s.portion }>\r\n            <span>{size} <p>кг</p></span>\r\n          </div>\r\n          <div className={s.photo_block}>\r\n          </div>\r\n\r\n        </div>\r\n\r\n        <div className={s.footer}>\r\n          {disableds \r\n            ? disabledFooterText \r\n            : hover \r\n            ? selectedFooter \r\n            : defaultFooter}\r\n        </div>\r\n\r\n\r\n      </div>\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\nimport s from './App.module.css';\nimport Card from './components/card/Card';\n\nfunction App() {\n  return (\n    <div className={s.test}>\n      <div className={s.container}>\n      <div className={s.container__block}>\n        <h1>Ты сегодня покормил кота?</h1>\n      <Card \n        taste='с фуа-гра'\n        bonus='10 порций\n        мышь в подарок'\n        size='0,5'\n        description='Печень утки разварная с артишоками.' />\n      <Card \n        taste='с рыбой'\n        bonus='40 порций\n        2 мыши в подарок'\n        size='2'\n        description='Головы щучьи с чесноком да свежайшая сёмгушка.' />\n      <Card \n        taste='с курой'\n        bonus='100 порций\n        5 мышей в подарок\n        заказчик доволен'\n        size='5'\n        description='Филе из цыплят с трюфелями в бульоне.' />\n      </div>\n    </div>\n    </div>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}